----EXCEPTION----
An exception is an unwanted or unexpected event,
which occurs during the execution of a program i.e at run time,
that disrupts the normal flow of the program’s instructions.

Types of Exception
1.Checked Exception
2.Unchecked Exception
3.Error...//error is considered as unchecked exception.

1) Checked Exception
The classes that extend Throwable class except RuntimeException and Error are known as checked exceptions 
e.g.IOException, SQLException etc. 
Checked exceptions are checked at compile-time.

2) Unchecked Exception
The classes that extend RuntimeException are known as unchecked exceptions
e.g. ArithmeticException, NullPointerException, ArrayIndexOutOfBoundsException etc.
Unchecked exceptions are not checked at compile-time rather they are checked at runtime.

3) Error
Error is irrecoverable 
e.g. OutOfMemoryError, VirtualMachineError, AssertionError etc.
Error is consider as Unchecked Exception

examples-
int a=50/0;//ArithmeticException  

String s=null;  
System.out.println(s.length());//NullPointerException  

String s="abc";  
int i=Integer.parseInt(s);//NumberFormatException 

int a[]=new int[5];  
a[10]=50; //ArrayIndexOutOfBoundsException  


In Java exceptions under Error and RuntimeException classes are unchecked exceptions,
everything else under throwable is checked.
   		   +-----------+
		   | Throwable |
                   +-----------+
                    /         \
		   /           \
          +-------+          +-----------+
          | Error |          | Exception |
          +-------+          +-----------+
	   /  |  \           / \        \
         \________/	  \______/    	 \
			                +------------------+
	unchecked	 checked	| RuntimeException |
					+------------------+
					   /   |    |   \
					 \_________________/
					   
					   unchecked

----Java Exception Handling Keywords----

There are 5 keywords used in java exception handling.

1.try
2.catch
3.finally
4.throw
5.throws

1.Java try block-
Java try block is used to enclose the code that might throw an exception.
It must be used within the method.
Java try block must be followed by either catch or finally block.

Syntax for try catch block
try
{  
//code that may throw exception  
}
catch(Exception_class_Name ref)
{
}  

Syntax for try finally block
try
{  
//code that may throw exception  
}
finally
{
}  


2.Java catch block
Java catch block is used to handle the Exception.
It must be used after the try block only.

You can use multiple catch block with a single try.


Problem

public class Testtrycatch1{  
  public static void main(String args[]){  
      int data=50/0;//may throw exception  
      System.out.println("rest of the code...");  
}  
}  
Exception in thread main java.lang.ArithmeticException:/ by zero


public class Testtrycatch2{  
  public static void main(String args[]){  
   try{  
      int data=50/0;  
   }catch(ArithmeticException e){System.out.println(e);}  
   System.out.println("rest of the code...");  
}
}  

Exception in thread main java.lang.ArithmeticException:/ by zero
rest of the code...


The JVM firstly checks whether the exception is handled or not. 
If exception is not handled, JVM provides a default exception handler that performs the following tasks:

1.Prints out exception description.
2.Prints the stack trace (Hierarchy of methods where the exception occurred).
3.Causes the program to terminate.

**But if exception is handled by the application programmer, 
normal flow of the application is maintained i.e. rest of the code is executed.


---Java Multi catch block---
If you have to perform different tasks at the occurrence of different Exceptions, 

use java multi catch block.

public class TestMultipleCatchBlock{  
  public static void main(String args[]){  
   try{  
    int a[]=new int[5];  //1 //a[0 , 1 , 2 , 3 , 4]
    
    a[5]=30/0;    //2
   }  
   catch(ArithmeticException e){System.out.println("task1 is completed");}  
   catch(ArrayIndexOutOfBoundsException e){System.out.println("task 2 completed");}  
   catch(Exception e){System.out.println("common task completed");}  
  
   System.out.println("rest of the code...");  
 }  
}  

Rule1: At a time only one Exception is occured and at a time only one catch block is executed.
Rule2: All catch blocks must be ordered from most specific to most general 
i.e. catch for ArithmeticException must come before catch for Exception .

class TestMultipleCatchBlock1{  
  public static void main(String args[]){  
   try{  
    int a[]=new int[5];  
    a[5]=30/0;  
   }  
   catch(Exception e){System.out.println("common task completed");}  
   catch(ArithmeticException e){System.out.println("task1 is completed");}  
   catch(ArrayIndexOutOfBoundsException e){System.out.println("task 2 completed");}  
   
   System.out.println("rest of the code..."); //***
 }  
}  

//CTE //Rule2

---Java Nested try block---
The try block within a try block is known as nested try block in java.

Sometimes a situation may arise where a part of a block may cause one error 
and the entire block itself may cause another error. 
In such cases, exception handlers have to be nested.

Syntax:

....  
try  
{  
    statement 1;  
    statement 2;  
    try  
    {  
        statement 1;  
        statement 2;  
    }  
    catch(Exception e) // catch for inner try  
    {  
    }  
}  
catch(Exception e)  //try for outer try
{  
}  
....


3.Java finally block
Java finally block is a block that is used to execute important code such as closing connection, stream etc.
Java finally block is always executed whether exception is handled or not.
Java finally block follows try or catch block. 

Note: If you don't handle exception, before terminating the program, JVM executes finally block(if any).

Finally block in java can be used to put "cleanup" code such as closing a file, closing connection etc.

**Rule: For each try block there can be zero or more catch blocks, but only one finally block.
Note: The finally block will not be executed if program exits
either by calling System.exit() or by causing a fatal error that causes the process to abort.


**Case 1**
where exception doesn't occur.

class TestFinallyBlock{  
  public static void main(String args[]){  
  try{  
   int data=25/5;  
   System.out.println(data);  
  }  
  catch(NullPointerException e){System.out.println(e);}  
  finally{System.out.println("finally block is always executed");}  
  System.out.println("rest of the code...");  
  }  
}  

finally block is always executed
rest of the code...


**Case 2**
exception occurs and not handled

class TestFinallyBlock1{  
  public static void main(String args[]){  
  try{  
   int data=25/0;  
   System.out.println(data);  
  }  
  catch(NullPointerException e){System.out.println(e);}  
  finally{System.out.println("finally block is always executed");}  
  System.out.println("rest of the code...");  
  }  
}

finally block is always executed
Exception in thread main ArithmaticException


**Case 3**
exception occurs and handled.

public class TestFinallyBlock2{  
  public static void main(String args[]){  
  try{  
   int data=25/0;  
   System.out.println(data);  
  }  
  catch(ArithmeticException e){System.out.println(e);}  
  finally{System.out.println("finally block is always executed");}  
  System.out.println("rest of the code...");  
  }  
}

Exception ArthmaticException
finally block is always executed
Rest of the code



4.Java throw exception

Java throw keyword

The Java throw keyword is used to explicitly throw an exception.
We can throw either checked or uncheked exception in java by throw keyword.
The throw keyword is mainly used to throw custom exception. 

Syntax
throw exception;
throw new IOException("Dialogue");

public class TestThrow1{  
   static void validate(int age){  
     if(age<18)  
      throw new ArithmeticException("not valid");  
     else  
      System.out.println("welcome to vote");  
   }  
   public static void main(String args[]){  
      validate(13);  
      System.out.println("rest of the code...");  
  }  
}  

5.Java throws keyword

The Java throws keyword is used to declare an exception. 
It gives an information to the programmer that there may occur an exception 
so it is better for the programmer to provide the exception handling code 
so that normal flow can be maintained.

Exception Handling is mainly used to handle the checked exceptions. 
If there occurs any unchecked exception such as NullPointerException, 
it is programmers fault that he is not performing check up before the code being used.

